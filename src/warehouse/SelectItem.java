/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package warehouse;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author gerko
 */
public class SelectItem extends javax.swing.JFrame {

    /**
     * Creates new form SelectItem
     */
    public SelectItem() {
        initComponents();
        dataTXT.setVisible(true);
        yearExpireDateBox.setVisible(false);
        monthExpireDateBox.setVisible(false);
        dayExpireDateBox.setVisible(false);
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        lblproductID = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        columnBox = new javax.swing.JComboBox();
        lblValues = new javax.swing.JLabel();
        dataTXT = new javax.swing.JTextField();
        yearExpireDateBox = new javax.swing.JComboBox();
        monthExpireDateBox = new javax.swing.JComboBox();
        dayExpireDateBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selecting Company");

        lblproductID.setText("Search with");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        columnBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "productID", "parcode", "productName", "companyID", "type", "cost", "expireDate", "sectionID" }));
        columnBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnBoxActionPerformed(evt);
            }
        });

        lblValues.setText("Values");

        dataTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataTXTActionPerformed(evt);
            }
        });

        yearExpireDateBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));

        monthExpireDateBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        monthExpireDateBox.setSelectedIndex(-1);

        dayExpireDateBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        dayExpireDateBox.setSelectedIndex(-1);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "productID", "parcode", "productName", "companyID", "storageMethod", "type", "cost", "expireDate", "quantity", "sectionID"
            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(lblproductID)
                        .addGap(46, 46, 46)
                        .addComponent(columnBox, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(lblValues)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dataTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(yearExpireDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(monthExpireDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dayExpireDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblproductID)
                    .addComponent(searchButton)
                    .addComponent(BackButton)
                    .addComponent(columnBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValues)
                    .addComponent(dataTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearExpireDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthExpireDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayExpireDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataTXTActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
      this.dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
  if (columnBox.getSelectedItem().toString().equals("productID")){
  if (dataTXT.getText().toString().equals(""))
  {JOptionPane.showMessageDialog(null, "Enter an item id"); return;}
  else if (!Controller.validateIntegerNumber(dataTXT.getText().toString()))
  {JOptionPane.showMessageDialog(null, "Enter a valid item id"); return;}
  else {
   try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where productID = ? ");
      ps.setString(1, dataTXT.getText().toString());
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  }
  }
  
  else if (columnBox.getSelectedItem().toString().equals("parcode")){
  if (dataTXT.getText().toString().equals(""))
  {JOptionPane.showMessageDialog(null, "Enter a par code id"); return;}
  else if (!Controller.validateIntegerNumber(dataTXT.getText().toString()))
  {JOptionPane.showMessageDialog(null, "Enter a valid parcode id"); return;}
  else {
   try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where parcode = ? ");
      ps.setString(1, dataTXT.getText().toString());
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  }
  }
  else if (columnBox.getSelectedItem().toString().equals("companyID")){
  if (dataTXT.getText().toString().equals(""))
  {JOptionPane.showMessageDialog(null, "Enter a company id"); return;}
  else if (!Controller.validateIntegerNumber(dataTXT.getText().toString()))
  {JOptionPane.showMessageDialog(null, "Enter a valid company id"); return;}
  else {
       try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where companyID = ? ");
      ps.setString(1, dataTXT.getText().toString());
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
      
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  }
  }
  else if (columnBox.getSelectedItem().toString().equals("sectionID")){
  if (dataTXT.getText().toString().equals(""))
  {JOptionPane.showMessageDialog(null, "Enter a section id"); return;}
  else if (!Controller.validateIntegerNumber(dataTXT.getText().toString()))
  {JOptionPane.showMessageDialog(null, "Enter a valid section id"); return;}
  else {
   try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where sectionID = ? ");
      ps.setString(1, dataTXT.getText().toString());
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  }
  }
  else if (columnBox.getSelectedItem().toString().equals("productName")){
  if (dataTXT.getText().toString().equals(""))
  {JOptionPane.showMessageDialog(null, "Enter an item name"); return;}
  else if (!Controller.validateName(dataTXT.getText().toString()))
  {JOptionPane.showMessageDialog(null, "Enter a valid item name"); return;}
  else {
   try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where productName = ? ");
      ps.setString(1, dataTXT.getText().toString());
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  }
  }
  else if (columnBox.getSelectedItem().toString().equals("type")){
  if (dataTXT.getText().toString().equals(""))
  {JOptionPane.showMessageDialog(null, "Enter an item type"); return;}
  else if (!Controller.validateName(dataTXT.getText().toString()))
  {JOptionPane.showMessageDialog(null, "Enter a valid item type"); return;}
  else {
   try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where type = ? ");
      ps.setString(1, dataTXT.getText().toString());
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
      
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  
  }
  }
  else if (columnBox.getSelectedItem().toString().equals("cost")){
  if (dataTXT.getText().toString().equals(""))
  {JOptionPane.showMessageDialog(null, "Enter an item cost"); return;}
  else if (!Controller.validateName(dataTXT.getText().toString()))
  {JOptionPane.showMessageDialog(null, "Enter a valid item cost"); return;}
  else {
   try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where cost = ? ");
      ps.setString(1, dataTXT.getText().toString());
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
      
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  }
  }
  else if (columnBox.getSelectedItem().toString().equals("expireDate")){
  if (yearExpireDateBox.getSelectedIndex()==-1)
  {
  JOptionPane.showMessageDialog(null, "Enter a year");
  return;
  }
  else if (monthExpireDateBox.getSelectedIndex()==-1)
  {
  JOptionPane.showMessageDialog(null, "Enter a month");
  return;
  }
  else if  (dayExpireDateBox.getSelectedIndex()==-1)
  {
  JOptionPane.showMessageDialog(null, "Enter a day");
  return;
  }
  else {
  try {
      Connection conn = ConnectDataBase.connect();
      PreparedStatement ps = conn.prepareStatement("select * from product where expireDate = ? ");
      String x = yearExpireDateBox.getSelectedItem().toString()+"-"+monthExpireDateBox.getSelectedItem().toString()+"-"+dayExpireDateBox.getSelectedItem().toString();
      ps.setString(1, x);
      ResultSet rs = ps.executeQuery();
      table.setModel(DbUtils.resultSetToTableModel(rs));
      
  }
  catch (Exception ex){
      JOptionPane.showMessageDialog(null, ex.getMessage());
  
  }
  
  
  
  }
  }
  
  
  
  
  
  
  
  
    }//GEN-LAST:event_searchButtonActionPerformed

    private void columnBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnBoxActionPerformed
      if (columnBox.getSelectedItem().toString().equals("expireDate"))
      {
     dataTXT.setVisible(false);
     yearExpireDateBox.setVisible(true);
     monthExpireDateBox.setVisible(true);
     dayExpireDateBox.setVisible(true);
      }
      else {
      dataTXT.setVisible(true);
     yearExpireDateBox.setVisible(false);
     monthExpireDateBox.setVisible(false);
     dayExpireDateBox.setVisible(false);
     
      
      }
    }//GEN-LAST:event_columnBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelectItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JComboBox columnBox;
    private javax.swing.JTextField dataTXT;
    private javax.swing.JComboBox dayExpireDateBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblValues;
    private javax.swing.JLabel lblproductID;
    private javax.swing.JComboBox monthExpireDateBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTable table;
    private javax.swing.JComboBox yearExpireDateBox;
    // End of variables declaration//GEN-END:variables
}
